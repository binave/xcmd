#!/bin/bash
#   Copyright 2021 bin jin
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

# unset functions
unset $( set | awk '/^__xj_[0-9a-z_]+[[:space:]]\(/{printf " " $1}');

__xj_run () {
    # todo XJ_JAR_ARGS support ""
    if [ "$XJ_MAIN_CLASS_PATH" ]; then
        set -- java $XJ_JAVA_ARGS -cp "$XJ_JAR_FILE" $XJ_MAIN_CLASS_PATH $XJ_JAR_ARGS;
    else
        set -- java $XJ_JAVA_ARGS -jar "$XJ_JAR_FILE" $XJ_JAR_ARGS;
    fi

    [ -x $XJ_MINUS_1_ARG ] && set -- $XJ_MINUS_1_ARG "$@";

    (
        export SHELL=/sbin/nologin;
        readonly SHELL;
        if [ "$xj_jar_log_prefix" ]; then
            {
                # unset environment variables and functions
                unset $( set | awk -F '[=[:space:]]' '/^(__)?(XJ|xj)_[0-9A-Za-z_]+(=|[[:space:]]\()/{printf " " $1}');
                nohup < /dev/null "$@"
            } 2>&1 | awk '{print '"$xj_jar_log_prefix"';fflush(stdout)}' &

        else
            unset $( set | awk -F '[=[:space:]]' '/^(__)?(XJ|xj)_[0-9A-Za-z_]+(=|[[:space:]]\()/{printf " " $1}');
            nohup < /dev/null "$@" 2>&1 &

        fi

        # # open port
        # xj_java_pid=$!;
        # {
        #     firewall-cmd --state >/dev/null 2>/dev/null || exit 1;
        #     which netstat >/dev/null 2>/dev/null || exit 1;
        #     {
        #         firewall-cmd --list-port;
        #         netstat -lnp;
        #     } | awk 'BEGIN{update=""};{
        #         if (/\/(tc|ud)p/) {
        #             for (i=1; i<=NF; i++) port[$i]++

        #         } else if (/[^0-9]'$xj_java_pid'\/java/) {
        #             sub(/.*:/, "", $4);
        #             sub(/[46]$/, "", $1);
        #             if (!port[$4 "/" $1]) {
        #                 update="true";
        #                 printf "open port \033[1m%s\033[0m/%s ", $4, $1;
        #                 system("firewall-cmd --zone=public --add-port=" $4 "/" $1 " --permanent;");

        #             } # else printf "port \033[1m%s\033[0m/%s already open.\n", $4, $1

        #         }
        #     }
        #     END{if(update) system("firewall-cmd --reload >/dev/null")}'
        #     # firewall-cmd --zone=public --remove-port=$port/$proto --permanent
        # } &
    )
    exit 0

}

__xj_test_zip_head() {
    [ -s "$1" ] || return 1;
    local xj_file_head xj_zip_head;
    printf -v xj_zip_head PK\\x03\\x04;
    read xj_file_head < "$1" 2>/dev/null;
    [ "$xj_zip_head" == "${xj_file_head:0:4}" ] || {
        printf "[\033[1;31mERROR\033[0m] '$1' not jar file.\n" >&2;
        return 1
    };
    return 0
}

[ "$XJ_JAR_FILE" -a -s "$XJ_JAR_FILE" ] && {
    __xj_test_zip_head "$XJ_JAR_FILE" || exit 1;
    __xj_run;
    exit
}

__xj_permission() {
    [ $UID == 0 ] || {
        printf "[\033[1;31mERROR\033[0m] Permission denied, try using '\033[32msudo %s\033[0m' command.\n" "${0##*/} $@" >&2;
        exit 1
    }
}

__xj_help() {

        printf "
usage: ${0##*/} [param...] \033[1m[option]\033[0m [args...]

param:
    -d | --dir   path [path...] \033[1m[option]\033[0m  batch run option.
    -h | --help                           print full help info.

\033[1moption\033[0m:
    start   [-D|--debug [port]]     start jar if not run. (support debug)
            [--live]                restart jar if not run,
                                    and logging live every 10 minutes.
    stop    [-f]                    stop jar process. (force stop)
    log     [[lines] -[days]]       print last n lines and n days before log. (default $XJ_LOG_PRINT_LAST_LINES lines)
                                e.g.
                                    ${0##*/} log 100 -0 # today the last 100 lines.

            [--redirect]            redirect stdout and stderr file
                                e.g.
                                    ${0##*/} log --redirect

            [--cron [path]]         auto redirect log file every day.
                                e.g.
                                    ${0##*/} log --cron /var/run

    restart [-D|--debug [port]]     restart jar process. (support debug)
    status  [-v]                    show process info (and threads info).
    info                            show setting.

e.g.
    xjar -d .
    xjar start -D 8081
    xjar -d /var/run restart -D 8081
    xjar stop -f
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no user@hostname 'export PATH=\$PATH:\$HOME/bin; xjar -d \$JAR_DIR1 \$JAR_DIR2 restart'
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no user@hostname 'export PATH=\$PATH:\$HOME/bin; cd \$JAR_DIR; xjar restart; sleep 30; xjar || { xjar log -0 100; exit 1; }'

" >&2

}

# awk strftime
__xj_pipe_pid () {
    [ "$1" ] || return 1;
    local xj_awk_pid xj_awk_pipe xj_fd_1="$(readlink --canonicalize /proc/$1/fd/1)";
    if [ "${xj_fd_1/\/pipe:\[/}" != "$xj_fd_1" ]; then
        while read xj_awk_pid xj_awk_pipe; do
            [ "${xj_fd_1%"$xj_awk_pipe"}" == "$xj_fd_1" ] || {
                printf $xj_awk_pid;
                return 0
            };
        done < <(ps -ef | awk '/strftime\(/{system("readlink --canonicalize /proc/" $2 "/fd/0")}' | awk -F '/' '{print $3, $5}')
        # if not found awk process by pipe, override stdout and stderr by text file.
    fi
    return 1
}

__xj_redirect() {
    [ "$(readlink --canonicalize /proc/$1/fd/1)" == "$2" ] && return 0;
    [ -s "$2" ] && return 1;
    mkdir -p "${2%/*}" || return 1;
    touch "$2";
    chown $3 "$2"; # ps -p $1 -o user | awk '{if(NR == 2) printf $1}'
#     gdb -p $1 >/dev/null 2>&1 <<GDB
# set scheduler-locking on
# print close(1)
# print open("$2", 1)
# print close(2)
# print open("$2", 1)
# quit
# GDB
    # # https://github.com/jerome-pouiller/reredirect
    reredirect -N -m "$2" $1

}

__xj_test_command() {
    which $1 >/dev/null 2>&1 && return 0;
    printf "[\033[1;31mERROR\033[0m] '%s' command \033[31mnot\033[0m found or \033[31mnot\033[0m in '\$PATH'\n" $1 >&2;
    return 1;
}

__xj_test_workspace() {
    [ -s "$XJ_JAR_FILE" ] && return 0;
    printf "[\033[1;31mERROR\033[0m] '\033[32m%s\033[0m' not work directory.\n" "$PWD" >&2;
    exit 1
}

__xj_test_single_process() {
    [ "${xj_java_pid/[^0-9]/}" == "$xj_java_pid" ] && return 0;
    printf "name:\033[1m%-26s\033[0m [\033[1;31mERROR\033[0m] not single process. pid: \033[1m%s\033[0m\n" $xj_jar_name, "${xj_java_pid//[^0-9]/ }" >&2;
    exit 1
}

__xj_load_config() {
    [ -s "$1" ] && eval $(awk -F \# '$1 ~ /=/{gsub(/^[[:space:]]+|[[:space:]]+$|;[[:space:]]*$/, "", $1); if(match($1, /^[^=]+="/)){sub(/="/, "=", $1); sub(/"$/, "", $1)}; gsub(/[`"\\]|\$\(/, "\\\\&", $1); printf "export XJ_"; if(match($1, /^[^=]+='\''/)) { print $1 } else print gensub(/=/, "&\"", 1, $1) "\""}' "$1");
}

__xj_java_args() {
    if [ "$XJ_MAIN_CLASS_PATH" ]; then
        set -- $XJ_JAVA_ARGS -cp "$XJ_JAR_FILE" $XJ_MAIN_CLASS_PATH $XJ_JAR_ARGS;
    else
        set -- $XJ_JAVA_ARGS -jar "$XJ_JAR_FILE" $XJ_JAR_ARGS;
    fi
    printf '%s' "$*"
}

__xj_main() {
    # unset environment variables
    unset CLASSPATH JAVA_HOME $( set | awk -F = '/^(XJ|xj)_[0-9A-Za-z_]+=/{printf " " $1}');

    XJ_LOCAL_XJAR_CONFIG_NAME='.xjarconf';
    XJ_LOG_PRINT_LAST_LINES=69;
    XJ_FIND_JAR_MAX_DEPTH=2;

    __xj_load_config /etc/xjar.conf;
    __xj_load_config $HOME/.xjarc;
    __xj_load_config $XJ_LOCAL_XJAR_CONFIG_NAME;
    eval $( set | awk '{if($_ ~ /^{[[:space:]]|[[:space:]]\(\)[[:space:]]$/) exit; if($_ !~ /^(XJ_|_=)/ && $_ ~ /^[A-Z_]+=[^(][^*]{,128}$/){print "export XJ_" $0}}');
    [ -e "${XJ_JAVA_BIN_DIR%/}/java" ] && export PATH=${XJ_JAVA_BIN_DIR%/}:$PATH;

    if [ "$XJ_JAR_LOG_DIR" ]; then
        :
    elif [ "$XJ_JAR_LOG_DIR_PRE" ]; then
        XJ_JAR_LOG_DIR="${XJ_JAR_LOG_DIR_PRE%/}/${PWD##*/}/${XJ_JAR_LOG_DIR_SUF#/}";
    else
        if [ "$XJ_JAR_LOG_DIR_SUF" ]; then
            XJ_JAR_LOG_DIR="/var/log/java/${PWD##*/}/${XJ_JAR_LOG_DIR_SUF#/}"
        else
            XJ_JAR_LOG_DIR="/var/log/java/${PWD##*/}/console"
        fi
    fi
    XJ_JAR_LOG_DIR="${XJ_JAR_LOG_DIR%/}";

    : ${XJ_LIVE_LOG_DIR:='/var/log/xjar-live'};

    for XJ_JAR_FILE in "$PWD/"*.jar; do
        [ "$XJ_JAR_FILE$XJ_JAR_FILE" == \
            "${XJ_JAR_FILE/[_-\.]'sources'[_-\.]/}${XJ_JAR_FILE/[_-\.]'src'[_-\.]/}" ] && \
                __xj_test_zip_head "$XJ_JAR_FILE" && break
    done
    XJ_JAR_FILE="${XJ_JAR_FILE/*\**/}"; # unset XJ_JAR_FILE if jar file not found

    [ -s "$XJ_JAR_FILE" ] && {
        xj_jar_name="${XJ_JAR_FILE##*/}";
        xj_jar_name="${xj_jar_name%.*}";
        # xj_args_file="$XJ_JAR_LOG_DIR/$xj_jar_name.args";
        xj_jar_dir="${XJ_JAR_FILE%/*}/";
        xj_user=`ls -l "$XJ_JAR_FILE" | awk '{if(NR == 1) printf $3}'`;
        xj_group=$(id -gn ${xj_user:-0,} 2>/dev/null) || {
            printf "[\033[1;31mERROR\033[0m] the file '\033[32m%s.jar\033[0m' owner user '\033[32m%s\033[0m' does not exist.\n" "$xj_jar_name" "$xj_user" >&2;
            exit 1
        }
        xj_java_pid=$(ps -ef | awk '/[[:space:]]+[0-9]{2}(:[0-9]{2}){2}[[:space:]]java[[:space:]].*'"${xj_jar_dir//\//\\/}"'.*\.jar/{print $2}');

        [ "$XJ_LOG_PREFIX" ] && {
            # man date
            [ "$XJ_LOG_PREFIX" == "${XJ_LOG_PREFIX/\%[A-DF-IMNPR-Za-eghj-npr-z]/}" -a "$XJ_LOG_PREFIX" == "${XJ_LOG_PREFIX/\%-[A-DF-IMNPR-Za-eghj-npr-z]/}" ] && {
                printf "[\033[1;31mERROR\033[0m] \033[1mLOG_PREFIX\033[0m invalid option: '\033[33m%s\033[0m' in '\033[32m%s\033[0m'\n" "$XJ_LOG_PREFIX" "$XJ_LOCAL_XJAR_CONFIG_NAME" >&2;
                exit 1

            };
            xj_jar_log_prefix='strftime("'"$XJ_LOG_PREFIX"'"), $0'; # for awk

        };
    };

    case $1 in
        start)
            __xj_permission "$@";
            __xj_test_command java || exit 1;
            __xj_test_workspace;

            [ "$2" == "--live" ] && {
                mkdir -p "$XJ_LIVE_LOG_DIR";
                if [ "$xj_java_pid" -a "${xj_java_pid/[^0-9]/}" == "$xj_java_pid" ]; then
                    # print every 10 minutes
                    [ $((1`date +%M` % 10)) == 0 ] && printf "%s\n" live

                else
                    printf "restart: ";
                    free -h | awk '/Mem:/{printf "u/a: %s/%s\n", $3, $2}';
                    export TEAMCITY_VERSION=none TERM=dumb;
                    nohup < /dev/null bash "$0" restart >/dev/null 2>&1 &

                fi

            } 2>&1 | awk -v dir_prefix="$XJ_LIVE_LOG_DIR" -v arg_name=$xj_jar_name \
                '{printf "%s, %-26s %s\n" ,strftime("%F %T"), arg_name ",", $0 >> strftime(dir_prefix "/live_%Y%m%d.log");fflush(stdout)}' && \
                    exit 0

            __xj_test_command reredirect || :;
            __xj_test_command netstat || :;
            __xj_test_command readlink || :;
            __xj_test_single_process;
            [ "$xj_java_pid" ] && { printf "name:\033[1m%-26s\033[0m is running.\n" $xj_jar_name; exit 1; } >&2;
            shift;
            case $1 in
                "") :;;
                --debug|-D)
                    [ "$2" ] && xj_port=$2 || xj_port=$XJ_DEBUG_PORT;
                    [ "$xj_port" ] || {
                        printf "[\033[1;31mERROR\033[0m] DEBUG_PORT \033[31mnot\033[0m set\n" >&2;
                        exit 1

                    };

                    xj_java_main_version=$(java -version 2>&1 | awk -F '[[:space:]".]' '/version/{print $4 * 1000 + $5}');
                    if [ $xj_java_main_version -lt 1005 ]; then
                        XJ_JAVA_ARGS+=" -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$xj_port";

                    elif [ $xj_java_main_version -gt 1008 ]; then
                        XJ_JAVA_ARGS+=" -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:$xj_port";

                    else
                        XJ_JAVA_ARGS+=" -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$xj_port";

                    fi

                    # jdb -connect com.sun.jdi.SocketAttach:hostname=127.0.0.1,port=$xj_port

                    unset xj_java_main_version xj_port

                ;;
                *)
                    printf "[\033[1;31mERROR\033[0m] Invalid option: start '\033[33m%s\033[0m'\n" "$1" >&2;
                    __xj_help;
                    exit 1

                ;;
            esac

            mkdir -pv "$XJ_JAR_LOG_DIR";
            chown -R $xj_user:$xj_group "$XJ_JAR_LOG_DIR";
            # echo "$@" > "$xj_args_file" && chown $xj_user:$xj_group "$xj_args_file";
            xj_jar_log_file="$(date +$XJ_JAR_LOG_DIR/${xj_jar_name}_%Y%m%d.log)";

            if [ "$XJ_MINUS_1_ARG" -a -s "$XJ_MINUS_1_ARG" ]; then
                [ -x "$XJ_MINUS_1_ARG" ] || {
                    printf "[\033[1;31mERROR\033[0m] '\033[32m%s\033[0m' not have executable permissions.\n" "$XJ_MINUS_1_ARG" >&2;
                    exit 1
                };
            fi

            export XJ_JAR_FILE xj_jar_log_prefix XJ_JAVA_ARGS XJ_JAR_ARGS XJ_MAIN_CLASS_PATH XJ_MINUS_1_ARG;

            touch "$xj_jar_log_file";
            chown $xj_user:$xj_group "$xj_jar_log_file";
            su --shell $SHELL $xj_user --command "$0" >> "$xj_jar_log_file";

            [ "$TERM" != "dumb" -a ! "$TEAMCITY_VERSION" ] && {
                printf "nohup < /dev/null \033[34mjava %s\033[0m >> \033[32m%s\033[0m 2>&1 &\n" "$(__xj_java_args)" "$xj_jar_log_file";
                tail -F -n 0 "$xj_jar_log_file" 2>/dev/null | sed -ru 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]|\r//g'

            }

        ;;
        log)
            __xj_test_workspace;
            case $2 in
                ""|[0-9]*|-[0-9]*)
                    shift;
                    [ "$1" == "${1/-[0-9]/}" ] || set -- ${2:-$XJ_LOG_PRINT_LAST_LINES} $1;
                    xj_jar_log_file="$(date -d "${2:-0} days" +$XJ_JAR_LOG_DIR/${xj_jar_name}_%Y%m%d.log)";

                    if [ "$TERM" != "dumb" -a ! "$TEAMCITY_VERSION" ] && [ ! "$2" ]; then
                        set -- -F -n ${1:-$XJ_LOG_PRINT_LAST_LINES};

                    else
                        set -- -n ${1:-$XJ_LOG_PRINT_LAST_LINES};
                        printf "\n"

                    fi

                    printf "==> \033[32m%s\033[0m <==\n" $xj_jar_log_file;
                    tail $@ "$xj_jar_log_file" 2>/dev/null | sed -ru 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]|\r//g'

                ;;
                --redirect)
                    __xj_permission "$@";
                    __xj_test_command reredirect || exit 1;
                    __xj_test_command readlink || exit 1;
                    [ "$xj_java_pid" ] || {
                        [ "$TERM" == "dumb" ] || printf "name:\033[1m%-26s\033[0m [\033[1;31mERROR\033[0m] not running.\n" $xj_jar_name, >&2;
                        exit 1
                    };
                    __xj_test_single_process;
                    # test awk prefix
                    xj_jar_new_log_file="$(date +$XJ_JAR_LOG_DIR/${xj_jar_name}_%Y%m%d.log)";
                    xj_pid=$(__xj_pipe_pid $xj_java_pid) || xj_pid=$xj_java_pid;
                    __xj_redirect $xj_pid "$xj_jar_new_log_file" $xj_user:$xj_group || {
                        printf "name:\033[1m%-26s\033[0m [\033[1;31mERROR\033[0m] target log file '$xj_jar_new_log_file' exist and not empty.\n" $xj_jar_name, >&2;
                        exit 1
                    }

                    chmod a-w "$(date -d -24\ hour +$XJ_JAR_LOG_DIR/${xj_jar_name}_%Y%m%d.log)" 2>/dev/null;

                ;;
                --cron)
                    __xj_test_command crontab || exit 1;
                    __xj_test_command reredirect || exit 1;
                    __xj_test_command readlink || exit 1;
                    shift; shift;
                    [ "$1" ] || {
                        printf "[\033[1;31mERROR\033[0m] directory path not set.\n" >&2;
                        exit 1
                    }
                    [ -d "$1" ] || {
                        printf "[\033[1;31mERROR\033[0m] '\033[32m%s\033[0m' server directory must exist.\n" $1 >&2;
                        exit 1
                    };
                    # todo /etc/cron.d/
                    xj_cron_expression="0 0 * * * sudo $0 -d ${1%/} log --redirect";
                    xj_cron_text=$(crontab -l 2>/dev/null);
                    if [ "$xj_cron_text" ]; then
                        xj_cron_text_trim=$(awk -F \# '{if($1 !~ /^[[:space:]]*$/) print $1}' <<< "$xj_cron_text");
                        if [ "${xj_cron_text_trim/$xj_cron_expression/}" == "$xj_cron_text_trim" ]; then
                            printf '%s\n%s\n' "$xj_cron_text" "$xj_cron_expression" | crontab -
                        fi
                    else
                        printf '# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * command to be executed
\n%s\n
' "$xj_cron_expression" | crontab -

                    fi
                    crontab -l

                ;;
                *)
                    printf "[\033[1;31mERROR\033[0m] Invalid option: log '\033[33m%s\033[0m'\n" "$2" >&2
                    exit 1
                ;;
            esac

        ;;
        stop)
            __xj_permission "$@";
            __xj_test_workspace;
            [ "$xj_java_pid" ] || { printf "name:\033[1m%-26s\033[0m not running.\n" $xj_jar_name; exit 1; } >&2;
            if [ "$2" == "-f" -o "${XJ_JAR_ARGS/--spring\.config\.location=/}" == "$XJ_JAR_ARGS" ]; then
                xj_sigspec=9;
            else
                xj_sigspec=15;
            fi
            kill -$xj_sigspec $xj_java_pid $(__xj_pipe_pid $xj_java_pid);
            sleep 0.5;
            xj_wait_limit=30;
            while ps -p $xj_java_pid >/dev/null; do
                sleep 1;
                [ $((xj_wait_limit--)) -le 0 ] && {
                    printf "[\033[1;31mERROR\033[0m] kill '\033[1m%s\033[0m' faild, pid: \033[1m%s\033[0m\n" $xj_jar_name $xj_java_pid >&2;
                    exit 1
                };

            done
            unset xj_wait_limit xj_sigspec;

        ;;
        restart)
            __xj_permission "$@";
            __xj_test_command java || exit 1;
            __xj_test_workspace;
            shift;
            # xj_tmp_args=$(cat "$xj_args_file" 2>/dev/null);
            # [ ! "$1" ] && [ "$xj_tmp_args" ] && set -- $xj_tmp_args;
            # unset xj_tmp_args;
            bash "$0" stop;
            bash "$0" start "$@"

        ;;
        status|"")
            __xj_test_workspace;
            __xj_test_single_process;
            if [ "$xj_java_pid" ]; then
                printf "name:\033[1m%-26s\033[0m pid:\033[1m%-6s\033[0m %-23s" ${PWD##*/}, $xj_java_pid, \
                $(which netstat >/dev/null 2>&1 && netstat -lnp 2>/dev/null | awk '/[^0-9]'$xj_java_pid'\/java/{if(!e++) printf " port:"; sub(/.*:/, "", $4); sub(/[46]$/, "", $1); printf "\033[1m%s/%s\033[0m,", $4, $1}');
                ps -p $xj_java_pid -o nlwp,pcpu,pmem,rss | awk 'NR == 2 {printf " threads:\033[1m%-5s\033[0m cpu:\033[1m%-8s\033[0m mem:\033[1m%-8s\033[0m\n", $1 ",", $2 "%,", $3 "% (" sprintf("%.3f", $4/1024/1024) "g)"}'
                [ "$2" == "-v" ] && ps -T -o tid,psr,pcpu,wchan:19,comm:15 -p $xj_java_pid | \
                    awk -v pre=${PWD##*/}, 'NR > 1 {printf "name:\033[1m%-26s\033[0m tid:\033[1m%-6s\033[0m core:\033[1m%-4s\033[0m cpu:\033[1m%-6s\033[0m %s:", pre, $1 ",", $2 ",", $3 "%,", $4; for(i=5;i<=NF;i++) printf "\033[1m%s ", $i; printf "\033[0m\n"}'

            else
                printf "name:\033[1m%-26s\033[0m inactive (\033[31mdead\033[0m).\n" ${PWD##*/}, >&2;
                exit 1
            fi

        ;;
        info)
            __xj_test_workspace;
            (
                XJ_WORKING_DIRECTORY="$PWD";
                printf '*.CRON_EXPRESSION: %s\n' "`crontab -l | awk -F \# '/'"${0//\//\\/}"'/{print $1}'`";
                printf '%s.START_COMMAND: nohup < /dev/null java %s >> %s 2>&1 &\n' "${PWD##*/}" "$(__xj_java_args)" "$(date +$XJ_JAR_LOG_DIR/${xj_jar_name}_%Y%m%d.log)";
                eval `awk -F '[^0-9A-Z_]' 'BEGIN{printf "export"};{for(i=1; i<=NF; i++){if ($i ~ /^XJ_[0-9A-Z_]+/ && ! m[$i]++) printf " " $i}}' "$0"`;
                awk -v pre=${PWD##*/} -F '[^0-9A-Z_]' '{for(i=1; i<=NF; i++){if ($i ~ /^XJ_[0-9A-Z_]+/ && ! m[$i]++) {sub(/^XJ_/, "", $i); system("printf \"%s\\n\" \"" pre "." $i ": $XJ_" $i "\"")}}}' "$0"
            ) | sort

        ;;
        --dir|-d|-r)
            shift;
            xj_tmp_args=" $* ";
            [ "$xj_tmp_args$xj_tmp_args$xj_tmp_args" == "${xj_tmp_args/ --dir /}${xj_tmp_args/ -d /}${xj_tmp_args/ -r /}" ] || {
                printf "[\033[1;31mERROR\033[0m] recurse option" >&2;
                __xj_help;
                exit 1
            };
            unset xj_dirs xj_tmp_args;
            [ -d "$1" ] || set -- "$PWD" "$@";
            # get all case-esac args
            xj_case_args=$(awk -F \) '/^[[:space:]]*[A-Za-z|-]+)/{gsub(/\|/, " ", $1); printf " %s ", $1}' "$0");
            # trim "$@", make sure path exist and not match case-esac
            while [ -d "$1" -a "${xj_case_args/ $1 /}" == "$xj_case_args" ]; do xj_dirs[${#xj_dirs[@]}]="$1"; shift; done
            unset xj_case_args xj_act;
            export TEAMCITY_VERSION=none TERM=dumb;
            while read xj_jar_dir; do
                (
                    cd "`dirname "$xj_jar_dir"`";
                    unset xj_dirs xj_jar_dir;
                    bash "$0" "$@";
                )
                xj_act=true
            done < <(
                __xj_recurse() {
                    for xj_path in "$1"/*.jar "$1"/*/; do
                        [ -f "$xj_path" ] && `__xj_test_zip_head "$xj_path" 2>/dev/null` && {
                            printf '%s\n' "$xj_path";
                            return 0
                        };
                        [ -d "$xj_path" -a ${2:-0} -lt $XJ_FIND_JAR_MAX_DEPTH ] && __xj_recurse "${xj_path%/}" $(($2 + 1))
                    done
                }
                for xj_tmp_dir in "${xj_dirs[@]}"; do __xj_recurse "$xj_tmp_dir"; done
            );
            [ "$xj_act" ] || \
                printf "[\033[1;31mERROR\033[0m] '\033[32m%s\033[0m' no jarfile found, find depth is $XJ_FIND_JAR_MAX_DEPTH.\n" $1 >&2;
            unset xj_dirs xj_jar_dir

        ;;
        -h|--help)
        __xj_help;

        [ "$UID" == "0" ] || printf "
visudo:
    cat >> \033[32m/etc/sudoers\033[0m <<-EOF\033[7m
Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin

# Cmnd alias specification
Cmnd_Alias  JAR_RUNNER = $0

# User privilege specification
$USER       ALL=(ALL)   NOPASSWD: JAR_RUNNER
\033[0mEOF
" >&2;

        printf "
Globle config:
    cat > \033[32m/etc/xjar.conf\033[0m <<-EOF\033[7m
FIND_JAR_MAX_DEPTH=2;
# LOG_PRINT_LAST_LINES=69
# LOCAL_XJAR_CONFIG_NAME=.xjarconf
# MINUS_1_ARG=./xjar
JAVA_ARGS=' -Xmx1024m'
JAVA_ARGS+=' -Xms1024m'
\033[0mEOF

User config:
    cat > \033[32m$HOME/.xjarc\033[0m <<-EOF\033[7m
JAR_LOG_DIR_PRE=/var/log/java;
JAR_LOG_DIR_SUF=/console;
LIVE_LOG_DIR=/var/log/xjar-live;
JAR_ARGS=' --config.location=./application.yml'
# JAVA_BIN_DIR=/usr/lib/jvm/openjdk-8/bin
\033[0mEOF

Local config:
    cat > \033[32m$XJ_LOCAL_XJAR_CONFIG_NAME\033[0m <<-EOF\033[7m
# JAR_LOG_DIR=/var/log/java/xxx/console; # Deprecated
# LOG_PREFIX='%%F %%T,'
DEBUG_PORT=9000;
# MAIN_CLASS_PATH='java.util.prefs.Base64'
JAR_ARGS=' --prefix=/xxx'
\033[0mEOF

" >&2
        ;;
        *)
            printf "[\033[31mERROR\033[0m] invalid option '\033[33m$1\033[0m'.\n" >&2;
            __xj_help;
            exit 1
        ;;
    esac

}

__xj_main "$@"
