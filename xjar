#!/bin/bash
#   Copyright 2021 bin jin
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

__xj_help() {

        printf "
usage: ${0##*/} [param...] \033[1m[option]\033[0m [args...]

param:
    -d | --dir   path [path...] \033[1m[option]\033[0m  batch run option.
    --cron       [path]                   auto redirect log file every day.
    -h | --help                           print full help info.

\033[1moption\033[0m:
    start   [-D|--debug [port]]     start jar if not run. (support debug)
    stop    [-f]                    stop jar process. (force stop)
    log     [lines|-[days]]         print last n lines and n days before log.
    restart [-D|--debug [port]]     restart jar process. (support debug)
    status                          show process info.
    live                            start jar if not run,
                                    and logging live every 10 minutes.
    redirect                        redirect stdout and stderr file

e.g.
    xjar -d .
    xjar start -D 8081
    xjar -d /var/run restart -D 8081
    xjar stop -f
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no user@hostname 'export PATH=\$PATH:\$HOME/bin; xjar -d \$JAR_DIR1 \$JAR_DIR2 restart'
    ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no user@hostname 'export PATH=\$PATH:\$HOME/bin; cd \$JAR_DIR; xjar restart; sleep 30; xjar || { xjar log -0 100; exit 1; }'

" >&2

}

__xj_unset() {
    # clear environment variables
    unset $(set | awk -F = '/^(XJ|xj)_[0-9A-Za-z_]+=/{printf " " $1}')
}

__xj_redirect() {
    [ -s "$2" ] && return 1;
    mkdir -p "${2%/*}" || return 1;
    touch "$2";
    gdb -p $1 >/dev/null 2>&1 <<GDB
set scheduler-locking on
print close(1)
print open("$2", 1)
print close(2)
print open("$2", 1)
quit
GDB

}

__xj_test_command() {
    which $1 >/dev/null 2>&1 && return 0;
    printf "[\033[1;31mERROR\033[0m] '%s' command \033[31mnot\033[0m found or \033[31mnot\033[0m in '\$PATH'\n" $1 >&2;
    return 1;
}

__xj_test_workspace() {
    [ -s "$xj_jar_path" ] && return 0;
    printf "[\033[1;31mERROR\033[0m] '\033[32m%s\033[0m' not work directory.\n" "$PWD" >&2;
    exit 1
}

__xj_test_single_process() {
    [ "${xj_java_pid/[^0-9]/}" == "$xj_java_pid" ] && return 0;
    printf "name:\033[1m%-26s\033[0m [\033[1;31mERROR\033[0m] not single process. pid: \033[1m%s\033[0m\n" $xj_jar_name, "${xj_java_pid//[^0-9]/ }" >&2;
    exit 1
}

__xj_main() {
    (
        # clear sub environment variables
        __xj_unset;
        # clear functions
        unset $(set | awk '/^__xj_[0-9A-Za-z_]+[[:space:]]*\(/{printf " " $1}');
        # main
        nohup < /dev/null java "$@" 2>&1 &
        # open port
        xj_java_pid=$!;
        {
            firewall-cmd --state >/dev/null 2>/dev/null || exit 1;
            which netstat >/dev/null 2>/dev/null || exit 1;
            {
                firewall-cmd --list-port;
                netstat -lnp;
            } | awk 'BEGIN{update=""};{
                if (/\/(tc|ud)p/) {
                    for (i=1; i<=NF; i++) port[$i]++

                } else if (/[^0-9]'$xj_java_pid'\/java/) {
                    sub(/.*:/, "", $4);
                    sub(/[46]$/, "", $1);
                    if (!port[$4 "/" $1]) {
                        update="true";
                        printf "open port \033[1m%s\033[0m/%s ", $4, $1;
                        system("firewall-cmd --zone=public --add-port=" $4 "/" $1 " --permanent;");

                    } # else printf "port \033[1m%s\033[0m/%s already open.\n", $4, $1

                }
            }
            END{if(update) system("firewall-cmd --reload >/dev/null")}'
            # firewall-cmd --zone=public --remove-port=$port/$proto --permanent
        } &
    )
}

__xj_load_config() {
    [ -s "$1" ] && eval $(awk -F \# '$1 ~ /=/{gsub(/^[[:space:]]+|[[:space:]]+$/, "", $1); print "export XJ_" $1}' "$1");
}

: ${XJ_LOCAL_XJAR_CONFIG_NAME:='.xjarconf'}

__xj_unset;
__xj_load_config /etc/xjar.conf;
__xj_load_config $HOME/.xjarc;
__xj_load_config $XJ_LOCAL_XJAR_CONFIG_NAME;
eval $(set | awk '/^[A-Z_]+=[^(][^*]{,128}$/{print "export XJ_" $0}');

if [ "$XJ_JAR_LOG_DIR" ]; then
    :
elif [ "$XJ_JAR_LOG_DIR_PRE" ]; then
    XJ_JAR_LOG_DIR="${XJ_JAR_LOG_DIR_PRE%/}/${PWD##*/}/${XJ_JAR_LOG_DIR_SUF#/}";
else
    if [ "$XJ_JAR_LOG_DIR_SUF" ]; then
        XJ_JAR_LOG_DIR="/var/log/java/${PWD##*/}/${XJ_JAR_LOG_DIR_SUF#/}"
    else
        XJ_JAR_LOG_DIR="/var/log/java/${PWD##*/}/console"
    fi
fi
XJ_JAR_LOG_DIR="${XJ_JAR_LOG_DIR%/}";

: ${XJ_LIVE_LOG_DIR:='/var/log/xjar-live'};

for xj_jar_path in "$PWD/"*.jar; do :; done
xj_jar_path="${xj_jar_path/*\**/}"; # jar file not found
xj_jar_path="${xj_jar_path/'-sources.'/.}";
xj_jar_path="${xj_jar_path/'-src.'/.}";

[ -s "$xj_jar_path" ] && {
    xj_jar_name="${xj_jar_path##*/}";
    xj_jar_name="${xj_jar_name%.*}";
    # xj_args_file="$XJ_JAR_LOG_DIR/$xj_jar_name.args";
    xj_jar_dir="${xj_jar_path%/*}/";
    xj_java_pid=$(ps -ef | awk '/'"${xj_jar_dir//\//\\/}"'.*\.jar/ && !/awk/{print $2}');
    [ "$XJ_LOG_PREFIX" ] && {
        # man date
        [ "$XJ_LOG_PREFIX" == "${XJ_LOG_PREFIX/\%[A-DF-IMNPR-Za-eghj-npr-z]/}" -a "$XJ_LOG_PREFIX" == "${XJ_LOG_PREFIX/\%-[A-DF-IMNPR-Za-eghj-npr-z]/}" ] && {
            printf "[\033[1;31mERROR\033[0m] \033[1mLOG_PREFIX\033[0m invalid option: '\033[33m%s\033[0m' in '\033[32m%s\033[0m'\n" "$XJ_LOG_PREFIX" "$XJ_LOCAL_XJAR_CONFIG_NAME" >&2;
            exit 1

        };
        xj_jar_log_prefix='strftime("'"$XJ_LOG_PREFIX"'"), $0'; # for awk

    };
};

case $1 in
    start)
        __xj_test_command java || exit 1;
        __xj_test_command gdb || :;
        __xj_test_command netstat || :;
        __xj_test_command readlink || :;
        __xj_test_workspace;
        __xj_test_single_process;
        [ "$xj_java_pid" ] && { printf "name:\033[1m%-26s\033[0m is running.\n" $xj_jar_name; exit 1; } >&2;
        shift;
        case $1 in
            "") :;;
            --debug|-D)
                [ "$2" ] && xj_port=$2 || xj_port=$XJ_DEBUG_PORT;
                [ "$xj_port" ] || {
                    printf "[\033[1;31mERROR\033[0m] DEBUG_PORT \033[31mnot\033[0m set\n" >&2;
                    exit 1

                };

                XJ_JAVA_ARGS+=" -Xdebug";
                XJ_JAVA_ARGS+=" -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=$xj_port";
                unset xj_port

            ;;
            *)
                printf "[\033[1;31mERROR\033[0m] Invalid option: start '\033[33m%s\033[0m'\n" "$1" >&2;
                __xj_help;
                exit 1

            ;;
        esac

        mkdir -pv $XJ_JAR_LOG_DIR;
        # echo "$@" > "$xj_args_file";
        xj_jar_log_file="$(date +$XJ_JAR_LOG_DIR/${xj_jar_name}_%Y%m%d.log)";

        if [ "$XJ_MAIN_CLASS_PATH" ]; then
            set -- $XJ_JAVA_ARGS -cp "$xj_jar_path" $XJ_MAIN_CLASS_PATH $XJ_JAR_ARGS;
        else
            set -- $XJ_JAVA_ARGS -jar "$xj_jar_path" $XJ_JAR_ARGS;
        fi

        if [ "$xj_jar_log_prefix" ]; then
            __xj_main "$@" | awk '{print '"${xj_jar_log_prefix}"';fflush(stdout)}' >> "$xj_jar_log_file" &
        else
            __xj_main "$@" >> "$xj_jar_log_file" &
        fi

        [ "$HISTCONTROL" -a ! "$TEAMCITY_VERSION" ] && {
            printf "\033[34mjava %s\033[0m >> \033[32m%s\033[0m 2>&1 &\n" "$*" $xj_jar_log_file;
            tail -F -n 0 "$xj_jar_log_file" 2>/dev/null | sed -ru 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]|\r//g'

        }

    ;;
    log)
        __xj_test_workspace;
        shift;
        [ "$1" == "${1/-[0-9]/}" ] || set -- ${2:-10} $1;
        xj_jar_log_file="$(date -d "${2:-0} days" +$XJ_JAR_LOG_DIR/${xj_jar_name}_%Y%m%d.log)";

        if [ "$HISTCONTROL" -a ! "$TEAMCITY_VERSION" ] && [ ! "$2" ]; then
            set -- -F -n ${1:-10};

        else
            set -- -n ${1:-10};
            printf "\n"

        fi

        printf "==> \033[32m%s\033[0m <==\n" $xj_jar_log_file;
        tail $@ "$xj_jar_log_file" 2>/dev/null | sed -ru 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]|\r//g'

    ;;
    stop)
        __xj_test_workspace;
        [ "$xj_java_pid" ] || { printf "name:\033[1m%-26s\033[0m not running.\n" $xj_jar_name; exit 1; } >&2;
        if [ "$2" == "-f" -o "${XJ_JAR_ARGS/--spring\.config\.location=/}" == "$XJ_JAR_ARGS" ]; then
            xj_sigspec=9;
        else
            xj_sigspec=15;
        fi
        kill -$xj_sigspec $xj_java_pid;
        sleep 0.5;
        xj_wait_limit=30;
        while ps -p $xj_java_pid >/dev/null; do
            sleep 1;
            [ $((xj_wait_limit--)) -le 0 ] && {
                printf "[\033[1;31mERROR\033[0m] kill '\033[1m%s\033[0m' faild, pid: \033[1m%s\033[0m\n" $xj_jar_name $xj_java_pid >&2;
                exit 1
            };

        done
        unset xj_wait_limit xj_sigspec;

    ;;
    restart)
        __xj_test_command java || exit 1;
        __xj_test_workspace;
        shift;
        # xj_tmp_args=$(cat "$xj_args_file" 2>/dev/null);
        # [ ! "$1" ] && [ "$xj_tmp_args" ] && set -- $xj_tmp_args;
        # unset xj_tmp_args;
        bash "$0" stop;
        bash "$0" start "$@"

    ;;
    status|"")
        __xj_test_workspace;
        __xj_test_single_process;
        if [ "$xj_java_pid" ]; then
            printf "name:\033[1m%-26s\033[0m pid:\033[1m%-6s\033[0m %-23s" ${PWD##*/}, $xj_java_pid, \
            $(which netstat >/dev/null 2>&1 && netstat -lnp 2>/dev/null | awk '/[^0-9]'$xj_java_pid'\/java/{if(!e++) printf " port:"; sub(/.*:/, "", $4); sub(/[46]$/, "", $1); printf "\033[1m%s/%s\033[0m,", $4, $1}');
            top -b -n 1 -p$xj_java_pid | tac | awk '{if($0 ~ /^KiB Mem/){printf " (\033[1m%.2f\033[0m/\033[1m%.0f\033[0mg)\n", ($8/1024/1024), ($4/1024/1024)} else if($0 ~ /java/){b[""]=1;b["m"]=1024;b["g"]=(1024*1024);s=$6;sub(/[gm]/, "", $6);sub(/[0-9\.]+/, "", s);printf " cpu:\033[1m%-6s\033[0m mem:\033[1m%-8s\033[0m", $9 "%,", sprintf("%.2f", $6*b[s]/1024/1024) "g" }}';

        else
            printf "name:\033[1m%-26s\033[0m inactive (\033[31mdead\033[0m).\n" ${PWD##*/}, >&2;
            exit 1
        fi

    ;;
    live)
        {
            __xj_test_command java || exit 1;
            mkdir -pv "$XJ_LIVE_LOG_DIR";
            __xj_test_workspace;
            if [ "$xj_java_pid" -a "${xj_java_pid/[^0-9]/}" == "$xj_java_pid" ]; then
                # print every 10 minutes
                [ $((1`date +%M` % 10)) == 0 ] && printf "%s\n" live

            else
                printf "restart: ";
                free -h | awk '/Mem:/{printf "u/a: %s/%s\n", $3, $2}';
                export TEAMCITY_VERSION=none HISTCONTROL=;
                nohup < /dev/null bash "$0" restart >/dev/null 2>&1 &

            fi
        } 2>&1 | awk -v dir_prefix="$XJ_LIVE_LOG_DIR" -v arg_name=$xj_jar_name \
                '{printf "%s, %-26s %s\n" ,strftime("%F %T"), arg_name ",", $0 >> strftime(dir_prefix "/live_%Y%m%d.log");fflush(stdout)}'

    ;;
    redirect)
        __xj_test_command gdb || exit 1;
        __xj_test_command readlink || exit 1;
        [ "$xj_java_pid" ] || {
            printf "name:\033[1m%-26s\033[0m [\033[1;31mERROR\033[0m] not running.\n" $xj_jar_name, >&2;
            exit 1
        };
        __xj_test_workspace;
        __xj_test_single_process;
        xj_jar_log_file="$(date +$XJ_JAR_LOG_DIR/${xj_jar_name}_%Y%m%d.log)";
        xj_java_fd="$(readlink --canonicalize /proc/$xj_java_pid/fd/1)";
        xj_pid=$xj_java_pid;
        if [ "${xj_java_fd/\/pipe:\[/}" != "$xj_java_fd" ]; then
            while read xj_awk_pid xj_awk_pipe; do
                [ "${xj_java_fd%"$xj_awk_pipe"}" == "$xj_java_fd" ] || {
                    xj_pid=$xj_awk_pid;
                    break
                };
            done < <(ps -ef | awk '/strftime\(/{system("readlink --canonicalize /proc/" $2 "/fd/0")}' | awk -F '/' '{print $3, $5}')
        fi
        __xj_redirect $xj_pid "$xj_jar_log_file" || {
            printf "name:\033[1m%-26s\033[0m [\033[1;31mERROR\033[0m] target log file '$xj_jar_log_file' exist and not empty.\n" $xj_jar_name, >&2;
            exit 1
        }

    ;;
    --dir|-d)
        shift;
        [ -d "$1" ] || {
            printf "[\033[1;31mERROR\033[0m] '\033[32m%s\033[0m' server directory must exist.\n" $1 >&2;
            exit 1
        };
        # all case
        __args__=$(awk -F \) '/^[[:space:]]*[A-Za-z|-]+)/{gsub(/\|/, " ", $1); printf " %s ", $1}' "$0");
        # make sure path exist and not match case
        while [ -d "$1" -a "${__args__/ $1 /}" == "$__args__" ]; do __dir__[${#__dir__[@]}]="$1"; shift; done
        unset __args__ xj_run;
        export TEAMCITY_VERSION=none HISTCONTROL=;
        while read __sh__; do
            (
                cd "`dirname "$__sh__"`";
                unset __dir__ __sh__;
                bash "$0" "$@";
            )
            xj_run=true
        done < <(find "${__dir__[@]}" -maxdepth ${XJ_MAX_DEPTH:-2} -type f -name $XJ_LOCAL_XJAR_CONFIG_NAME);
        [ "$xj_run" ] || \
            printf "[\033[1;31mERROR\033[0m] '\033[32m%s\033[0m' no $XJ_LOCAL_XJAR_CONFIG_NAME found, find depth is ${XJ_MAX_DEPTH:-2}.\n" $1 >&2;
        unset __dir__ __sh__

    ;;
    --cron)
        __xj_test_command crontab || exit 1;
        __xj_test_command gdb || exit 1;
        __xj_test_command readlink || exit 1;
        shift;
        [ -d "$1" ] || {
            printf "[\033[1;31mERROR\033[0m] '\033[32m%s\033[0m' server directory must exist.\n" $1 >&2;
            exit 1
        };
        xj_cron_expression="0 0 * * * $SHELL $0 -d ${1%/} redirect";
        xj_cron_text=$(crontab -l 2>/dev/null);
        xj_cron_text_trim=$(crontab -l 2>/dev/null | awk -F \# '{if($1 !~ /^[[:space:]]*$/) print $1}');
        if [ "$xj_cron_text_trim" ]; then
            if [ "${xj_cron_text_trim/$xj_cron_expression/}" == "$xj_cron_text_trim" ]; then
                printf '%s\n%s\n' "$xj_cron_text" "$xj_cron_expression" | crontab -
            fi
        else
            printf '# .---------------- minute (0 - 59)
# |  .------------- hour (0 - 23)
# |  |  .---------- day of month (1 - 31)
# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
# |  |  |  |  |
# *  *  *  *  * command to be executed
\n%s\n
' "$xj_cron_expression" | crontab -

        fi
        crontab -l
    ;;
    -h|--help)
    __xj_help;
printf "

Globle config:
    cat > \033[32m/etc/xjar.conf\033[0m <<-EOF\033[7m
MAX_DEPTH=2;
# LOCAL_XJAR_CONFIG_NAME=.xjarconf
JAVA_ARGS=' -Xmx1024m'
JAVA_ARGS+=' -Xms1024m'
\033[0mEOF

User config:
    cat > \033[32m$HOME/.xjarc\033[0m <<-EOF\033[7m
JAR_LOG_DIR_PRE=/var/log/java;
JAR_LOG_DIR_SUF=/console;
LIVE_LOG_DIR=/var/log/xjar-live;
JAR_ARGS=' --config.location=./application.yml'
\033[0mEOF

Local config:
    cat > \033[32m.xjarconf\033[0m <<-EOF\033[7m
# JAR_LOG_DIR=/var/log/java/xxx/console; # Deprecated
# LOG_PREFIX='%%F %%T,'
DEBUG_PORT=9000;
# MAIN_CLASS_PATH='java.util.prefs.Base64'
JAR_ARGS=' --prefix=/xxx'
\033[0mEOF

" >&2
    ;;
    *)
        printf "[\033[31mERROR\033[0m] invalid option '\033[33m$1\033[0m'.\n" >&2;
        __xj_help
    ;;
esac
